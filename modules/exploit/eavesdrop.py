import pyshark
import os
from datetime import datetime
from tqdm import tqdm
import time
# import asyncio
# from rich.console import Console
# console = Console()

def audio_scraper(cap,raw_audio):
    rtp_list =[]
    for i in cap:
        try:
            rtp = i[3] # In packet, there are 4 layer. <ETH Layer>, <IP Layer>, <UDP Layer>, <RTP Layer>]. i[3] = RTP Layer
            if rtp.payload: #checking if have payload in RTP layers
                # print(rtp.payload)
                rtp_list.append(rtp.payload.split(":"))
        except:
            pass
    for rtp_packet in rtp_list:
        packet = " ".join(rtp_packet)
        # print(packet)
        audio = bytearray.fromhex(packet)
        raw_audio.write(audio)
    print("[+] Finished outputing raw audio")
    print("[+] File output: ")

def make_file(file_type, name):
    today = datetime.now()
    if file_type == 'pcap':
        directory = 'data/packet_capture/' + today.strftime('%d' + '_%m_' + '%Y')
        if not os.path.exists(directory):
            os.makedirs(directory)
        return (directory +'/{0}.pcap'.format(name))

    if file_type == 'audio':
        directory = 'data/audio_out/' + today.strftime('%d' + '_%m_' + '%Y')
        if not os.path.exists(directory):
            os.makedirs(directory)
        return (directory +'/{0}.raw'.format(name))

def eavesdropping(filename):
    print('============ Eavesdropping ============')
    pcap_file = make_file('pcap', filename)
    audio_file = make_file('audio', filename)

    print('[+] Create packet capture file')
    create_pcap = open(pcap_file,'wb')

    print('[+] Start Live capture process')
    driver = pyshark.LiveCapture(interface='ens36')
    livecap = driver.sniff(timeout=10)

    # with console.status("[bold green]Listening...") as status:
    #     while livecap:
    #         sleep(1)
    #         console.log("Live capture complete")

    if livecap != None:
        print('[+] Write live capture data to file')
        create_pcap.write(livecap)
        file.close()

        #Create audio file
        raw_audio = open(audio_file,'wb')
        print('[+] Start Audio scrapping process')
        audio_scraper(livecap,raw_audio)

    else:
        cap = pyshark.FileCapture('data/packet_capture/1204.pcapng', display_filter='rtp')
        #Create audio file
        raw_audio = open(audio_file,'wb')
        print('[+] Start Audio scrapping process')
        audio_scraper(cap,raw_audio)

    print('[+] Packet capture file: ' + pcap_file)
    print('[+] Audio capture file: ' + audio_file)