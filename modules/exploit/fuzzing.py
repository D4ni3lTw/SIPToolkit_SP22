import http.client
import sys
import os
from optparse import OptionParser
import string
import signal
import ssl
from time import sleep
import random
import subprocess

def signal_handler(signal, frame):
	print("\n[-] Scan stopped by user.")
	sys.exit(0)
signal.signal(signal.SIGINT, signal_handler)

def dir_fuzzing(targetURL, listFile, requestMethod = 'GET', showRedirect = ''):
    startFrom = 0
    reqTimeout = 15

    if requestMethod == None:
        requestMethod = "GET"

    if listFile == None or targetURL == None:
        print("[-] Wordlist/ Target is not set")
        sys.exit()

    if not os.path.isfile(listFile):
        print("[-] Error: File (" + listFile + ") doesn't exist.")
        sys.exit()

    if targetURL[-1] != "/":
        targetURL += "/"

    targetPro = ""
    print('\n----------------------------------------------------')
    print('Directory Fuzzing')
    print('----------------------------------------------------')

    if targetURL[:5].lower() == 'https':
        targetDomain = targetURL[8:].split("/",1)[0].lower()
        targetPath = "/" + targetURL[8:].split("/",1)[1]
        connection = http.client.HTTPSConnection(targetDomain, timeout=reqTimeout, context=ssl._create_unverified_context())
        targetPro = "https://"
        print("Target       : " + targetPro+targetDomain + " (over HTTPS)")
        print("Path         : " + targetPath)

    elif targetURL[:5].lower() == 'http:':
        targetDomain = targetURL[7:].split("/",1)[0].lower()
        targetPath = "/"+targetURL[7:].split("/",1)[1]
        connection = http.client.HTTPConnection(targetDomain, timeout=reqTimeout)
        targetPro = "http://"
        print("Target       : " + targetDomain)
        print("Path         : " + targetPath)

    else:
        targetDomain = targetURL.split("/",1)[0].lower()
        targetPath = "/"+targetURL.split("/",1)[1]
        connection = http.client.HTTPConnection(targetDomain, timeout=reqTimeout)
        targetPro = "http://"
        print("Target       : " + targetDomain)
        print("Path         : " + targetPath)
    print("Method       : " + requestMethod)
    print("Timeout      : " + str(reqTimeout))

    if showRedirect != None:
        print("Show Redirect:  ON")

    try:
        randomPage = ''.join([random.choice(string.ascii_lowercase + string.digits) for n in range(16)])
        connection.request(requestMethod, targetPath+randomPage+".txt")
        res = connection.getresponse()
    except Exception as ErrMs:
        print("MainError: " + str(ErrMs))
        sys.exit(0)

    if res.status == 200:
        print("NOTE: Looks like the server is returning code 200 for all requests, there might be lots of false positive links.")

    if res.status >= 300 and res.status < 400 and showRedirect != None:
        print("NOTE: Looks like the server is returning code " + str(res.status) + " for all requests, there might be lots of false positive links. try to scan without the option -r")

    tpData = res.read()

    with open(listFile) as lFile:
        pathList = lFile.readlines()
    totalURLs = len(pathList)
    print ("Scanning ( " + str(totalURLs) + " ) files...")
    countFound = 0
    countAll = 0
    strLine = ""
    data200 = []
    data300 = []
    data = []
    for pathLine in pathList:
        try:
            countAll = countAll + 1
            pathLine = pathLine.strip("\n")
            pathLine = pathLine.strip("\r")
            if countAll < startFrom:
                continue
            if pathLine != "":
                if pathLine[:1] == "/":
                    pathLine = pathLine[1:]
                print (' ' * len(strLine), "\r", end="")
                strLine = "Checking ["+str(countAll)+"/"+str(totalURLs)+"] "+targetPath+pathLine
                print (strLine,"\r", end="")
                connection.request(requestMethod, targetPath+pathLine)
                res = connection.getresponse()
                resBody = res.read().decode("utf-8")
                resBodySize = len(resBody)
                isignored = False

                fURL = str(targetPro+targetDomain+targetPath+pathLine)
                redirectHead = ""
                if res.getheader("location") != None:
                    redirectHead = str(res.getheader("location"))
                if res.status >= 200 and res.status < 300:
                    if isignored == False and resBodySize >= 0:
                        print (' ' * len(strLine), "\r", end="")
                        print("Code " + str(res.status) + " : " + fURL + " (" + str(resBodySize) + " Byte)")
                        countFound += 1
                        data200 = {
                            'url': fURL,
                            'status_code': res.status
                        }
                        data.append(data200)

                if showRedirect != None:
                    if res.status >= 300 and res.status < 400:
                        if isignored == False and resBodySize >= 0:
                            print (' ' * len(strLine), "\r", end="")
                            print("Code " + str(res.status) + " : " + fURL + " ( " + redirectHead + " )")
                            countFound += 1
                            data300 = {
                            'url': fURL,
                            'status_code': res.status
                            }
                        data.append(data300)

        except Exception as ErrMs:
            print (' ' * len(strLine), "\r", end="")
            print("[-] Error[" + str(countAll) + "]: " + str(ErrMs))
            try:
                connection.close()
                pass
            except Exception as e:
                print("[-] Error2:" + str(e))
                pass

    connection.close()
    print (' ' * len(strLine), "\r", end="")
    print( "[+] Total Pages found: " + str(countFound) )
    return data
